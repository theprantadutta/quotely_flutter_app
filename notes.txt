Of course, bro. Let's switch from external links to the official Google Play In-App Purchase system. This is the most professional and secure way to handle this, and it's fully compliant with Google's policies.

You're rightâ€”you don't need to provide any premium features. We will sell "digital goods" that act as a thank you or a tip jar. The user gets the good feeling of supporting you, and that's the "product."

This is a bit more involved than launching a URL, so I'll give you a complete guide: the necessary setup in the Google Play Console and the full, updated code for the screen.

-----

### **Part 1: Setup (CRITICAL - Do this before using the code)**

This system will not work without setting things up in your Google Play Console first.

**1. Add the Flutter Package:**
Open your terminal and add the official package for in-app purchases:

```bash
flutter pub add in_app_purchase
```

**2. Add Billing Permission (Android):**
Go to `android/app/src/main/AndroidManifest.xml` and make sure this permission is inside the `<manifest>` tag:

```xml
<uses-permission android:name="com.android.vending.BILLING" />
```

**3. Create In-App Products in Google Play Console:**

  * Go to your [Google Play Console](https://play.google.com/console/).

  * Select your app, then in the left menu, go to **Monetize \> In-app products**.

  * Click **"Create product"** and create two separate products:

      * **Product 1:**

          * **Product ID:** `support_the_dev_1` (must be exact)
          * **Name:** `Support the Dev`
          * **Description:** `A small contribution to support the ongoing development of Quotely.`
          * **Price:** Set a price (e.g., the equivalent of $5 USD).

      * **Product 2:**

          * **Product ID:** `buy_me_a_coffee_1` (must be exact)
          * **Name:** `Buy Me a Coffee`
          * **Description:** `If you enjoy Quotely, you can buy me a virtual coffee to show your appreciation!`
          * **Price:** Set a price (e.g., the equivalent of $2 USD).

  * For both products, make sure they are **"Managed product"** (one-time purchase) and set them to **Active**.

-----

### **Part 2: The Full UI Code**

Replace your entire `support_us_screen.dart` file with this new version. It's been completely refactored to handle the entire in-app purchase lifecycle: loading products, handling purchases, and listening for updates.

#### `lib/screens/support_us_screen.dart`

```dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:share_plus/share_plus.dart';

class SupportUsScreen extends StatefulWidget {
  static const kRouteName = '/support-us';
  const SupportUsScreen({super.key});

  @override
  State<SupportUsScreen> createState() => _SupportUsScreenState();
}

class _SupportUsScreenState extends State<SupportUsScreen> {
  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  late StreamSubscription<List<PurchaseDetails>> _subscription;

  // The IDs for our in-app products, matching the Play Console
  final Set<String> _productIds = {'support_the_dev_1', 'buy_me_a_coffee_1'};
  
  List<ProductDetails> _products = [];
  bool _loading = true;
  String _statusMessage = 'Loading support options...';

  @override
  void initState() {
    super.initState();
    final Stream<List<PurchaseDetails>> purchaseUpdated = _inAppPurchase.purchaseStream;
    // Listen to the stream for purchase updates
    _subscription = purchaseUpdated.listen((purchaseDetailsList) {
      _listenToPurchaseUpdated(purchaseDetailsList);
    }, onDone: () {
      _subscription.cancel();
    }, onError: (error) {
      setState(() {
        _statusMessage = 'An error occurred: $error';
        _loading = false;
      });
    });

    _initializeIAP();
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  Future<void> _initializeIAP() async {
    final bool isAvailable = await _inAppPurchase.isAvailable();
    if (!isAvailable) {
      setState(() {
        _statusMessage = 'In-app purchases are not available on this device.';
        _loading = false;
      });
      return;
    }
    // Load the product details from the store
    await _loadProducts();
  }

  Future<void> _loadProducts() async {
    final ProductDetailsResponse response = await _inAppPurchase.queryProductDetails(_productIds);
    if (response.notFoundIDs.isNotEmpty) {
      _statusMessage = 'Products not found. Check your Play Console setup.';
    }
    setState(() {
      _products = response.productDetails;
      _loading = false;
    });
  }

  void _listenToPurchaseUpdated(List<PurchaseDetails> purchaseDetailsList) {
    for (var purchaseDetails in purchaseDetailsList) {
      if (purchaseDetails.status == PurchaseStatus.pending) {
        // Show pending UI if needed
      } else {
        if (purchaseDetails.status == PurchaseStatus.error) {
          // Handle error
          ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Purchase failed. Please try again.')));
        } else if (purchaseDetails.status == PurchaseStatus.purchased || purchaseDetails.status == PurchaseStatus.restored) {
          // Handle successful purchase
          _handleSuccessfulPurchase(purchaseDetails);
        }
        if (purchaseDetails.pendingCompletePurchase) {
          _inAppPurchase.completePurchase(purchaseDetails);
        }
      }
    }
  }

  void _handleSuccessfulPurchase(PurchaseDetails purchaseDetails) {
    // Here you can save a flag to SharedPreferences that the user is a supporter
    // e.g., `prefs.setBool('is_supporter', true);`
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Thank you for your generous support!')),
    );
  }

  void _buyProduct(ProductDetails productDetails) {
    final PurchaseParam purchaseParam = PurchaseParam(productDetails: productDetails);
    // This will open the Google Play purchase sheet
    _inAppPurchase.buyNonConsumable(purchaseParam: purchaseParam);
  }

  void _shareApp(BuildContext context) {
    const String appShareLink = 'https://play.google.com/store/apps/details?id=com.pranta.quotely_flutter_app';
    const String shareMessage = 'Check out Quotely! A beautiful app for daily quotes and inspiration:';
    Share.share('$shareMessage $appShareLink', subject: 'Check out the Quotely App!');
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    // Find our specific products from the loaded list
    final ProductDetails? supportProduct = _products.cast<ProductDetails?>().firstWhere(
          (p) => p?.id == 'support_the_dev_1',
          orElse: () => null,
    );
    final ProductDetails? coffeeProduct = _products.cast<ProductDetails?>().firstWhere(
          (p) => p?.id == 'buy_me_a_coffee_1',
          orElse: () => null,
    );

    return Scaffold(
      appBar: AppBar(
        title: const Text('Support Us'),
        centerTitle: true,
        elevation: 0,
      ),
      body: _loading
          ? Center(child: Column(mainAxisSize: MainAxisSize.min, children: [const CircularProgressIndicator(), const SizedBox(height: 16), Text(_statusMessage)]))
          : CustomScrollView(
              slivers: [
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 20.0),
                    child: Column(
                      children: [
                        const SizedBox(height: 10),
                        ShaderMask(
                          shaderCallback: (bounds) => LinearGradient(
                            colors: [theme.colorScheme.primary, theme.colorScheme.secondary],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ).createShader(bounds),
                          child: const Icon(Icons.volunteer_activism, size: 80, color: Colors.white),
                        ),
                        const SizedBox(height: 20),
                        Text('Support Our Journey', style: theme.textTheme.headlineMedium?.copyWith(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 10),
                        Text(
                          'Quotely is a passion project. Your support helps us dedicate more time to new features and keep the app free for everyone.',
                          textAlign: TextAlign.center,
                          style: theme.textTheme.titleMedium?.copyWith(color: theme.colorScheme.onSurfaceVariant),
                        ),
                        const SizedBox(height: 30),
                      ],
                    ),
                  ),
                ),
                SliverPadding(
                  padding: const EdgeInsets.symmetric(horizontal: 16.0),
                  sliver: SliverList(
                    delegate: SliverChildListDelegate([
                      _buildSectionHeader(context, "Show Your Support"),
                      if (supportProduct != null)
                        _buildSupportTile(
                          context: context,
                          icon: Icons.favorite_rounded,
                          iconColor: Colors.pink.shade400,
                          title: supportProduct.title,
                          subtitle: '${supportProduct.description} (${supportProduct.price})',
                          onTap: () => _buyProduct(supportProduct),
                        ),
                      if (coffeeProduct != null)
                        _buildSupportTile(
                          context: context,
                          icon: Icons.coffee_rounded,
                          iconColor: Colors.brown.shade400,
                          title: coffeeProduct.title,
                          subtitle: '${coffeeProduct.description} (${coffeeProduct.price})',
                          onTap: () => _buyProduct(coffeeProduct),
                        ),
                      const SizedBox(height: 20),
                      _buildSectionHeader(context, "Other Ways to Help"),
                      _buildSupportTile(
                        context: context,
                        icon: Icons.share_rounded,
                        iconColor: theme.colorScheme.primary,
                        title: 'Share the App',
                        subtitle: 'Help the community grow by sharing.',
                        onTap: () => _shareApp(context),
                      ),
                    ]),
                  ),
                ),
                const SliverToBoxAdapter(child: SizedBox(height: 40)),
              ],
            ),
    );
  }

  Widget _buildSectionHeader(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Text(
        title.toUpperCase(),
        style: Theme.of(context).textTheme.labelMedium?.copyWith(
              fontWeight: FontWeight.bold,
              color: Theme.of(context).colorScheme.onSurface.withOpacity(0.6),
              letterSpacing: 1.2,
            ),
      ),
    );
  }

  Widget _buildSupportTile({
    required BuildContext context,
    required IconData icon,
    required Color iconColor,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6.0),
      child: Material(
        color: theme.colorScheme.surfaceContainer,
        borderRadius: BorderRadius.circular(16),
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(16),
          splashColor: iconColor.withOpacity(0.1),
          highlightColor: iconColor.withOpacity(0.1),
          child: Container(
            padding: const EdgeInsets.all(20),
            child: Row(
              children: [
                Icon(icon, color: iconColor, size: 30),
                const SizedBox(width: 20),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(title, style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold)),
                      const SizedBox(height: 4),
                      Text(subtitle, style: theme.textTheme.bodyMedium?.copyWith(color: theme.colorScheme.onSurfaceVariant)),
                    ],
                  ),
                ),
                const Icon(Icons.arrow_forward_ios_rounded, size: 16),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
```